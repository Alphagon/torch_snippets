[
  {
    "objectID": "decorators.html",
    "href": "decorators.html",
    "title": "Decorator Utilites",
    "section": "",
    "text": "check_kwargs_not_none\n\n check_kwargs_not_none (func)\n\n\n\n\nio\n\n io (func)\n\n\n\n\ntimeit\n\n timeit (func)\n\n\n@timeit\n@io\ndef foo(a, b):\n    import time\n\n    time.sleep(1)\n    return a + b\n\n\nfoo(10, 11)\n\n══════════════════════════════════════════════════════════════════\nINPUTS:ARGS:\ntuple of 2 items\n        int: 10\n        int: 11\n══════════════════════════════════════════════════════════════════\n══════════════════════════════════════════════════════════════════\nOUTPUTS:\nint: 21\n══════════════════════════════════════════════════════════════════\n[07/27/23 12:44:08] INFO     foo took 1.02 seconds to       <ipython-input-1-2384d961f6ef>:wrapper:7\n                             execute                                                                \n\n\n21\n\n\n\n@check_kwargs_not_none\n@io\ndef foo(*, a=None, b=None):\n    return a + b\n\n\nfoo(a=None, b=10)\n\nValueError: Input argument 'a' cannot be None\n\n\n\nimport nbdev\n\nnbdev.nbdev_export()"
  },
  {
    "objectID": "markups.html",
    "href": "markups.html",
    "title": "Markups",
    "section": "",
    "text": "AttrDict\n\n AttrDict (data)\n\nUtility to call a dictionary like an object FEATURES: 0. Get and Set any key (or a nested key) like it’s an object, tab-completion supported self.key1.key2[0].key3 … 1. Keys and Values are recursively parsed as AttrDicts 2. Formatting with self.pretty() 3. Convert everything to dict at any time via self.to_dict() 3. Recursively drop keys using self.drop(key) from a json object 4. Recursively call a function on all values at all levels using map\nGOTCHAS: 1. Due to enforcing a self.key format all integer keys are converted to strings implicitly. 2. You can still call self[int] but this internally converts the int to string\n\nxx = AttrDict({\"a\": 1, \"b\": [{\"c\": 2, \"d\": 4}, {\"e\": 3}]})\nprint(type(xx.b[0]))\nprint(type(xx.to_dict()[\"b\"][0]))\nxx.pretty()\n\n<class '__main__.AttrDict'>\n\n\n\n<class 'dict'>\n\n\n\n{\n    \"a\": 1,\n    \"b\": [\n        {\n            \"c\": 2,\n            \"d\": 4\n        },\n        {\n            \"e\": 3\n        }\n    ]\n}\n\n\n\n\nx = {\"abc\": {\"b\": 10, \"c\": 11}, \"d\": {\"e\": {\"f\": [2, {\"abc\": \"pqrs\"}, 2.234]}}}\n\ny = AttrDict(x)\n\nassert y.abc.b == 10\nassert y.d.e.f == [2, {\"abc\": \"pqrs\"}, 2.234]\n\ny.d.e.g = 11\n\n# del y.abc.c\n# OR\ndel y[\"abc\"][\"c\"]\n\nassert y.to_dict() == {\n    \"abc\": {\"b\": 10},\n    \"d\": {\"e\": {\"f\": [2, {\"abc\": \"pqrs\"}, 2.234], \"g\": 11}},\n}\n\ny.pretty(indent=2)\n\nassert \"abc\" in y\nassert \"def\" not in y\nprint(\"e\" in y.d)\n\n{\n  \"abc\": {\n    \"b\": 10\n  },\n  \"d\": {\n    \"e\": {\n      \"f\": [\n        2,\n        {\n          \"abc\": \"pqrs\"\n        },\n        2.234\n      ],\n      \"g\": 11\n    }\n  }\n}\n\n\n\nTrue\n\n\n\n\n\n\nwrite_json\n\n write_json (obj, fpath, silent=False)\n\n\n\n\nread_json\n\n read_json (fpath)\n\n\nd = [1, {1: 1, 2: 2}, 3]\n\npretty_json({1: 1, 2: 2})\npretty_json(d)\n\nf = write_json(d, \"/tmp/test.json\")\nprint(f)\nread_json(f)\n\n[09/21/22 01:15:05] DEBUG                                                                  3923293551.py:<module>:3\n                             {                                                                                     \n                                 \"1\": 1,                                                                           \n                                 \"2\": 2                                                                            \n                             }                                                                                     \n\n\n\n                    DEBUG                                                                  3923293551.py:<module>:4\n                             [                                                                                     \n                                 1,                                                                                \n                                 {                                                                                 \n                                     \"1\": 1,                                                                       \n                                     \"2\": 2                                                                        \n                                 },                                                                                \n                                 3                                                                                 \n                             ]                                                                                     \n\n\n\n                    DEBUG    Dumping json to /tmp/test.json                                3923293551.py:<module>:6\n\n\n\n/tmp/test.json\n\n\n\n[1, {'1': 1, '2': 2}, 3]\n\n\n\n\n\nread_jsonl\n\n read_jsonl (file)\n\n\n\n\nwrite_jsonl\n\n write_jsonl (items, dest, mode='w')\n\n\n\n\nwrite_yaml\n\n write_yaml (content, fpath)\n\n\n\n\nread_yaml\n\n read_yaml (file)\n\n\n\n\nwrite_xml\n\n write_xml (data:Union[torch_snippets.markup.AttrDict,dict],\n            file_path:Union[str,pathlib.Path])\n\n\n\n\nread_xml\n\n read_xml (file_path:Union[str,pathlib.Path])\n\nRead xml data as a dictionary"
  },
  {
    "objectID": "interactive_show.html",
    "href": "interactive_show.html",
    "title": "torch_snippets",
    "section": "",
    "text": "ishow\n\n ishow (im, df, additional_attrs=None, **kwargs)\n\n\n\n\ndf2graph_nodes\n\n df2graph_nodes (df, text_attr='text', additional_attrs=None)\n\n\n\n\nviz2\n\n viz2 (graph, node_attrs=None, undirected=True, **kwargs)\n\n\n\n\nconvert_to_nx\n\n convert_to_nx (g, node_attrs=None, undirected=True)\n\n\n\n\ntolist\n\n tolist (i)\n\n\n\n\ntonp\n\n tonp (i)\n\n\n\n\nplot_graph\n\n plot_graph (g, output, im=None, **kwargs)\n\n\n\n\nplot_image\n\n plot_image (p, image, sz)\n\n\n\n\nto_networkx\n\n to_networkx (data, node_attrs:Union[Iterable[str],NoneType]=None,\n              edge_attrs:Union[Iterable[str],NoneType]=None,\n              graph_attrs:Union[Iterable[str],NoneType]=None,\n              to_undirected:Union[bool,str,NoneType]=False,\n              remove_self_loops:bool=False)\n\nConverts a :class:torch_geometric.data.Data instance to a :obj:networkx.Graph if :attr:to_undirected is set to :obj:True, or a directed :obj:networkx.DiGraph otherwise.\nArgs: data (torch_geometric.data.Data): The data object. node_attrs (iterable of str, optional): The node attributes to be copied. (default: :obj:None) edge_attrs (iterable of str, optional): The edge attributes to be copied. (default: :obj:None) graph_attrs (iterable of str, optional): The graph attributes to be copied. (default: :obj:None) to_undirected (bool or str, optional): If set to :obj:True or “upper”, will return a :obj:networkx.Graph instead of a :obj:networkx.DiGraph. The undirected graph will correspond to the upper triangle of the corresponding adjacency matrix. Similarly, if set to “lower”, the undirected graph will correspond to the lower triangle of the adjacency matrix. (default: :obj:False) remove_self_loops (bool, optional): If set to :obj:True, will not include self loops in the resulting graph. (default: :obj:False)\nExamples:\n>>> edge_index = torch.tensor([\n...     [0, 1, 1, 2, 2, 3],\n...     [1, 0, 2, 1, 3, 2],\n... ])\n>>> data = Data(edge_index=edge_index, num_nodes=4)\n>>> to_networkx(data)\n<networkx.classes.digraph.DiGraph at 0x2713fdb40d0>"
  },
  {
    "objectID": "load_defautls.html",
    "href": "load_defautls.html",
    "title": "torch_snippets",
    "section": "",
    "text": "File Exists\nand what to do if it doesn’t\n\n\n\nloadifexists\n\n loadifexists (fpath, default)\n\nLoad data from a dill file if it exists, else return default value\n\n\n\nexists\n\n exists (fpath)\n\nAlias for os.path.exists"
  },
  {
    "objectID": "sklegos.html",
    "href": "sklegos.html",
    "title": "torch_snippets",
    "section": "",
    "text": "SK-Legos\nUtilities to do common ML tasks\n\nYou can find 1. train_test_split which also resets the dataframes’ indexes 2. MakeFrame 3. ImputeMisingValues 4. Cat2Num 5. Other scikit-lego blocks that I use a lot\n\n\nMakeFrame\n\n MakeFrame (column_names)\n\nConvert sklearn’s output to a pandas dataframe Especially useful when working with an ensemble of models\nUsage\nCall MakeFrame as the last component in your pipeline with the desired column names.\npipeline = Pipeline([\n    ...,\n    ('output', MakeFrame(['outlier', 'class'])),\n])\n\nRefer to this notebook for an example\n\n\n\n\nImputeMissingValues\n\n ImputeMissingValues (num_mode=<function mean>, cat_mode='MISSING')\n\nDataFrame input - DataFrame output During fit - 1. Store imputable value for each column During transform - 2. Impute missing values with imputable value 3. Create a ’{col}_na’ boolean column to tell if cells contained missing value\n/Users/yeshwanth.y/miniconda3/envs/mdm/lib/python3.8/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Notes\n  else: warn(msg)\n\n\n\nLambdaTransformer\n\n LambdaTransformer (fn)\n\nBase class for all estimators in scikit-learn.\n\n\n\nMakeFrame\n\n MakeFrame (column_names)\n\nBase class for all estimators in scikit-learn.\n\n\n\nCat2Num\n\n Cat2Num ()\n\nBase class for all estimators in scikit-learn.\n\n\n\nSplitDateColumn\n\n SplitDateColumn (column_names, has_date, has_time, date_format=None)\n\nBase class for all estimators in scikit-learn."
  },
  {
    "objectID": "bounding_boxes.html",
    "href": "bounding_boxes.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Bounding Box\n\nCreate a box by mentioning the top-left (x, y) and bottom-right (X, Y) coordinates\nSay x, y, X, Y are 10, 20, 40, 50 respectively\n\nbb = BB([10, 20, 40, 50])\n\nYou get the following attributes for free\n\n\n\nbb.x=10              (top left - x)\nbb.y=20              (top left - y)\nbb.X=40              (bottom right - x)\nbb.Y=50              (bottom right - y)\nbb.w=30              (width)\nbb.h=30              (height)\nbb.xc=25.0           (center x)\nbb.yc=35.0           (center y)\nbb.c=(25.0, 35.0)    (center)\nbb.area=900          (area)\nbb.shape=(30, 30)    (height, width)\n\n\n\n\nfrom torch_snippets import show, read, P, pd\n\n\nassets = P(\"/Users/yeshwanth.y/code/torch_snippets/assets/\")\nim = read(assets / \"Preamble.png\")\ndf = pd.read_csv(assets / \"Preamble.csv\")\nshow(df.head())\ndf = to_absolute(df, *im.shape[:2])\nshow(df.head())\ndf = to_relative(df, *im.shape[:2])\nshow(df.head())\n\n\n\n  \n    \n      \n      x\n      y\n      X\n      Y\n      text\n      block_id\n    \n  \n  \n    \n      0\n      135\n      181\n      308\n      218\n      ConstITUtIO\n      0\n    \n    \n      1\n      156\n      264\n      217\n      284\n      NLTHE\n      1\n    \n    \n      2\n      218\n      264\n      276\n      284\n      PEOPLE\n      1\n    \n    \n      3\n      267\n      265\n      295\n      282\n      OF\n      1\n    \n    \n      4\n      297\n      264\n      341\n      284\n      INDIA,\n      1\n    \n  \n\n\n\n\n\n  \n    \n      \n      x\n      y\n      X\n      Y\n      text\n      block_id\n    \n  \n  \n    \n      0\n      135\n      181\n      308\n      218\n      ConstITUtIO\n      0\n    \n    \n      1\n      156\n      264\n      217\n      284\n      NLTHE\n      1\n    \n    \n      2\n      218\n      264\n      276\n      284\n      PEOPLE\n      1\n    \n    \n      3\n      267\n      265\n      295\n      282\n      OF\n      1\n    \n    \n      4\n      297\n      264\n      341\n      284\n      INDIA,\n      1\n    \n  \n\n\n\n\n\n  \n    \n      \n      x\n      y\n      X\n      Y\n      text\n      block_id\n    \n  \n  \n    \n      0\n      0.249538\n      0.253501\n      0.569316\n      0.305322\n      ConstITUtIO\n      0\n    \n    \n      1\n      0.288355\n      0.369748\n      0.401109\n      0.397759\n      NLTHE\n      1\n    \n    \n      2\n      0.402957\n      0.369748\n      0.510166\n      0.397759\n      PEOPLE\n      1\n    \n    \n      3\n      0.493530\n      0.371148\n      0.545287\n      0.394958\n      OF\n      1\n    \n    \n      4\n      0.548983\n      0.369748\n      0.630314\n      0.397759\n      INDIA,\n      1\n    \n  \n\n\n\n\nshow(im, df=df, sz=10)\n\n\n\n\n\nshow(im, df=to_absolute(df, *im.shape[:2]), sz=10)\n\n\n\n\n\n_df = to_absolute(df, *im.shape[:2])\nshow(im, df=to_relative(_df, *im.shape[:2]), sz=10)\n\n\n\n\n\n_df = combine_xyXY_to_bb(_df)\nshow(im, df=to_relative(_df, *im.shape[:2]), sz=10)\n\n\n\n\n\nto_relative(_df, *im.shape[:2])\n\n\n\n\n\n  \n    \n      \n      text\n      block_id\n      bb\n    \n  \n  \n    \n      0\n      ConstITUtIO\n      0\n      [0.24953789279112754, 0.2535014005602241, 0.56...\n    \n    \n      1\n      NLTHE\n      1\n      [0.28835489833641403, 0.3697478991596639, 0.40...\n    \n    \n      2\n      PEOPLE\n      1\n      [0.4029574861367837, 0.3697478991596639, 0.510...\n    \n    \n      3\n      OF\n      1\n      [0.49353049907578556, 0.3711484593837535, 0.54...\n    \n    \n      4\n      INDIA,\n      1\n      [0.5489833641404805, 0.3697478991596639, 0.630...\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      68\n      GIVE\n      13\n      [0.4011090573012939, 0.7366946778711485, 0.478...\n    \n    \n      69\n      TO\n      13\n      [0.4879852125693161, 0.7366946778711485, 0.536...\n    \n    \n      70\n      oUrSELVES\n      13\n      [0.5508317929759704, 0.7394957983193278, 0.706...\n    \n    \n      71\n      THIS\n      13\n      [0.7190388170055453, 0.7366946778711485, 0.783...\n    \n    \n      72\n      CONSTITUTION.\n      14\n      [0.23290203327171904, 0.7689075630252101, 0.44...\n    \n  \n\n73 rows × 3 columns\n\n\n\n\n\nisin\n\n isin (bboxes1, bboxes2, return_matrix=True)\n\nreturn indexes of those boxes from bboxes1 that are completely inside bboxes2\n\n\n\nmerge_by_bb\n\n merge_by_bb (df1, df2, suffixes=('_x', '_y'), iou_threshold=0.1)\n\nMerge df1 columns to df2 by using iou Make sure both df1 & df2 are relative or both absolute"
  },
  {
    "objectID": "show.html",
    "href": "show.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Show is intended to show numpy-arrays/PIL-images\n\nfrom torch_snippets import *\n\nim = np.random.rand(100, 100)\nshow(im)\n\n\n\n\n\nshow(im, sz=4)\n\n\n\n\nShow will even accept pytorch Tensors and show them as images, even if they are on GPU and have channels first\nIt can accept bounding boxes as tuples of (x,y,X,Y) which can be integers (i.e., absolute coordinates) or fractions (between \\([0,1]\\)). There’s provision to give bb_colors and texts as well\n\nshow(im, bbs=[(0, 0, 0.5, 0.35), (0, 0.2, 0.35, 0.95)])\n\nshow(im, bbs=[(0, 0, 0.5, 0.35), (0, 0.2, 0.35, 0.95)], bb_colors=[\"r\", \"g\"])\n\nshow(\n    im,\n    bbs=[(0, 0, 0.5, 0.35), (0, 0.2, 0.35, 0.95)],\n    bb_colors=[\"b\", \"g\"],\n    texts=[\"bb1\", \"bb2\"],\n    sz=10,\n    text_sz=15,\n)\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\nClipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n\n\n\n\n\nIt can also read a file path directly and display the image\n\nshow(\"../docs/images/company_logo_big.png\", sz=3)\n\n\n\n\nif the input is not an image or string, show will simply display the given input as intended by jupyter notebook\n\ndf = pd.DataFrame(np.random.rand(100, 2))\nshow(df)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n    \n  \n  \n    \n      0\n      0.242478\n      0.929517\n    \n    \n      1\n      0.971890\n      0.506750\n    \n    \n      2\n      0.139826\n      0.753227\n    \n    \n      3\n      0.864799\n      0.524166\n    \n    \n      4\n      0.563610\n      0.135709\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      95\n      0.379874\n      0.639771\n    \n    \n      96\n      0.993731\n      0.811343\n    \n    \n      97\n      0.621683\n      0.763054\n    \n    \n      98\n      0.844509\n      0.915156\n    \n    \n      99\n      0.314272\n      0.392418\n    \n  \n\n100 rows × 2 columns\n\n\n\n\nchart = Chart(df).mark_circle().encode(x=\"0:Q\", y=\"1:Q\")\nshow(chart.interactive())\n\n\n\n\n\n\n\n\ndisplay multiple images Subplots is a wapper around plt.subplots that accepts a list of images, number of columns as nc and additional kwargs\n\nfrom torch_snippets import subplots\n\nims = [np.random.rand(100, 100) for _ in range(16)]\n\nsubplots(ims, nc=4, sz=5)\n\n\n\n\n\nsubplots(\n    ims,\n    nc=2,\n    sz=(5, 15),\n    suptitle=\"RANDOM IMAGES\",\n    titles=[f\"random_{i}\" for i in range(16)],\n)"
  },
  {
    "objectID": "pdf.html",
    "href": "pdf.html",
    "title": "torch_snippets",
    "section": "",
    "text": "PDF\nLoad and view pages of a pdf WIP\n\n\n\nPDF\n\n PDF (path, dfs=None)\n\nLoad a PDF file from path as a list of images Use show function to see the images WIP"
  },
  {
    "objectID": "charts.html",
    "href": "charts.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Altair\n\n\nfrom torch_snippets.loader import *\nfrom sklearn.datasets import make_moons\n\nnp.random.seed(10)\nx, y = make_moons(1000, noise=0.1)\ndf = pd.DataFrame({\"x1\": x[:, 0], \"x2\": x[:, 1], \"y\": y})\n\nChart(df).mark_circle().encode(x=\"x1:Q\", y=\"x2:Q\", color=\"y:N\").interactive()\n\n\n\n\n\n\nRefer to altair-viz.github.io for more awesome charts.\ntorch-snippets exposes a confusion matrix function CM as an example\n\nMethod 1\n\nn = 10\na = \"qwertyuiopasdfghjklzxcvbnm\"\ntruth = np.random.randint(4, size=1000000)\npred = np.random.randint(4, size=1000000)\nshow(CM(truth=truth, pred=pred, mapping={i: a for i, a in enumerate(a)}))\n# mapping is optional\n\n              precision    recall  f1-score   support\n\n           0       0.25      0.25      0.25    250150\n           1       0.25      0.25      0.25    250245\n           2       0.25      0.25      0.25    249836\n           3       0.25      0.25      0.25    249769\n\n    accuracy                           0.25   1000000\n   macro avg       0.25      0.25      0.25   1000000\nweighted avg       0.25      0.25      0.25   1000000\n\n\n\n\n\n\n\n\n\n\n\nMethod 2\n\ndf = pd.DataFrame(\n    {\n        \"truth\": [randint(n) for _ in range(1000)],\n        \"pred\": [randint(n) for _ in range(1000)],\n    }\n)\nshow(CM(df, \"truth\", \"pred\", mapping={i: a for i, a in enumerate(a)}))\n# mapping is optional\n\n              precision    recall  f1-score   support\n\n           0       0.13      0.14      0.13        92\n           1       0.08      0.09      0.08       101\n           2       0.13      0.12      0.13       107\n           3       0.06      0.06      0.06       105\n           4       0.12      0.11      0.11        94\n           5       0.12      0.09      0.10       115\n           6       0.08      0.10      0.09        88\n           7       0.08      0.07      0.08       113\n           8       0.09      0.09      0.09        99\n           9       0.12      0.15      0.13        86\n\n    accuracy                           0.10      1000\n   macro avg       0.10      0.10      0.10      1000\nweighted avg       0.10      0.10      0.10      1000\n\n\n\n\n\n\n\n\n\n\n\nMethod 3\n\ndf = pd.DataFrame(\n    {\n        \"truth\": [choose(\"abcd\") for _ in range(1000)],\n        \"pred\": [choose(\"abcd\") for _ in range(1000)],\n    }\n)\nshow(CM(df, \"truth\", \"pred\"))\n# mapping is optional\n\n              precision    recall  f1-score   support\n\n           a       0.25      0.29      0.27       229\n           b       0.28      0.29      0.28       256\n           c       0.27      0.24      0.26       267\n           d       0.26      0.25      0.25       248\n\n    accuracy                           0.27      1000\n   macro avg       0.26      0.27      0.26      1000\nweighted avg       0.27      0.27      0.26      1000"
  },
  {
    "objectID": "paths.html",
    "href": "paths.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Paths\nUtilities to manipulate OS files\n\nMost basic class is the pathlib.Path class that is abbreviated to P\n\np = P(\"test.txt\")\np.touch()\nlogger.info(p.size())\n\n[10/14/22 18:03:02] INFO     0 KB                                                    1417366103.py:<cell line: 3>:3\n\n\n\n\n\n\nPath objects can be moved and copied\n\np = p.mv(\"test1.txt\")\nq = p.cp(\"test2.txt\")\n\n\n\n\nFolder items can be listed\n\nP().ls()\n\n[» _quarto.yml,\n » test1.txt,\n » markups.ipynb,\n » sidebar.yml,\n » test2.txt,\n » load_defautls.ipynb,\n » sklegos.ipynb,\n » bounding_boxes.ipynb,\n » show.ipynb,\n » pdf.ipynb,\n » charts.ipynb,\n » paths.ipynb,\n » nbdev.yml,\n » jupyter_notebook.ipynb,\n » misc.ipynb,\n » registry.ipynb,\n » adapters.ipynb,\n » report.ipynb,\n » .ipynb_checkpoints,\n » capsule.ipynb,\n » logging.ipynb,\n » inspector.ipynb,\n » bokeh_plotting.ipynb,\n » index.ipynb,\n » imgaug_loader.ipynb]\n\n\n\n\n\nPath objects have a size, extn (extension) and parent attributes\n\nassert isinstance(q, P)\nassert q.size() == \"0 KB\"\nassert str(p) == \"test1.txt\"\nassert p.extn() == \"txt\"\nassert p.parent == P()\n\n\n\n\nThey can be deleted with/without a prompt\n\np.rm(confirm_prompt=False)\nq.rm(confirm_prompt=False)\n\n\n\n\nFolders can be globbed with a default of everything\n\np = P(\"../torch_snippets\")\nassert P().ls() == P().Glob()\np.Glob(\"*.py\")\n\n[» ../torch_snippets/misc.py,\n » ../torch_snippets/load_defaults.py,\n » ../torch_snippets/text_utils.py,\n » ../torch_snippets/_nbdev.py,\n » ../torch_snippets/paths.py,\n » ../torch_snippets/charts.py,\n » ../torch_snippets/pdf_loader.py,\n » ../torch_snippets/registry.py,\n » ../torch_snippets/_modidx.py,\n » ../torch_snippets/inspector.py,\n » ../torch_snippets/__init__.py,\n » ../torch_snippets/torch_loader.py,\n » ../torch_snippets/logger.py,\n » ../torch_snippets/markup.py,\n » ../torch_snippets/fastcores.py,\n » ../torch_snippets/sklegos.py,\n » ../torch_snippets/ipython.py,\n » ../torch_snippets/loader.py,\n » ../torch_snippets/imgaug_loader.py,\n » ../torch_snippets/bokeh_loader.py,\n » ../torch_snippets/bb_utils.py,\n » ../torch_snippets/adapters.py]\n\n\n\n\n\nYou can sample a random file from the directory\n\nq = p.sample(\"*.py\")\nInfo(f\"Sample file: `{q}`\")\nInfo(f\"Sample file size: `{q.size()}`\")\n\n[10/14/22 18:03:12] INFO     Sample file: `../torch_snippets/registry.py`            1725593160.py:<cell line: 2>:2\n\n\n\n                    INFO     Sample file size: `0 KB`                                1725593160.py:<cell line: 3>:3\n\n\n\n\n\n\n\ntry:\n    p.size()\nexcept Exception as e:\n    logger.warning(e)\n\n                    WARNING  `../torch_snippets` is a directory                      1980994904.py:<cell line: 1>:4\n\n\n\n\n\n\n\np = P(\"test.txt\")\np.touch()\nassert isdir(p) == False\nassert fname(p) == \"test.txt\"\nassert parent(p) == P()\nassert stem(p) == \"test\"\nassert extn(p) == \"txt\"\n\nprint(find(\"capsule\", Glob(\"./\")))\n\np.rm(confirm_prompt=False)\n\ncapsule.ipynb\n\n\n\n\n\n\n\nlist_zip\n\n list_zip (file)\n\n\n\n\nunzip_file\n\n unzip_file (file, dest)\n\n\n\n\nzip_files\n\n zip_files (list_of_files, dest)\n\n\n!touch test1.txt test2.txt\nf = zip_files(P().Glob(\"*.txt\"), \"test.tar.gz\")\nunzip_file(f, \"./\")\n[f.rm() for f in P().Glob(\"*.txt\")]\nP(\"test.tar.gz\").rm()\n\n!touch test1.txt test2.txt\nf = zip_files(P().Glob(\"*.txt\"), \"test.zip\")\nunzip_file(f, \"./\")\n[f.rm() for f in P().Glob(\"*.txt\")]\nP(\"test.zip\").rm()\n\n[10/14/22 18:03:16] INFO     Zipping 2 files to test.tar.gz...                             112186647.py:zip_files:7\n\n\n\n100%|██████████| 2/2 [00:00<00:00, 192.90it/s]\n\n\n[10/14/22 18:03:17] INFO     Zipping 2 files to test.zip...                                112186647.py:zip_files:7\n\n\n\n100%|██████████| 2/2 [00:00<00:00, 745.99it/s]\n\n\n\n\n\n\n\n\nremove_duplicates\n\n remove_duplicates (files)\n\nCheck a list of files and remove duplicates based on their checksum\n\n\n\nmd5\n\n md5 (fname)\n\n\nmd5(\"paths.ipynb\")\n\n'e09ac0bed28afa6d7ef602401dd790cc'\n\n\n\n\n\n\n\n\nPath.write_lines\n\n Path.write_lines (lines, mode)\n\n\n\n\nwritelines\n\n writelines (lines, file, mode='w')\n\n\n\n\nPath.read_lines\n\n Path.read_lines (silent=False, encoding=None)\n\n\n\n\nreadlines\n\n readlines (fpath, silent=False, encoding=None)\n\n\nx = P(\"tmp.txt\")\nx.touch()\nx.write_lines([i for i in range(1000)])\nlines = x.read_lines()\nassert lines == [f\"{i}\" for i in range(1000)]\nlogger.info(x.size())\n\nx.rm(confirm_prompt=False)\n\n[10/14/22 18:03:22] INFO     loaded 1000 lines                                          1600187089.py:read_lines:13\n\n\n\n                    INFO     3 KB                                                     211133948.py:<cell line: 6>:6\n\n\n\n\n\n\n\n\n\nloaddill\n\n loaddill (fpath)\n\nLoad a python object from a dill file\n\n\n\ndumpdill\n\n dumpdill (obj, fpath, silent=False)\n\nDump a python object as a dill file (better replacement to pickle)\n\np = P(\"test.tmp\")\ndumpdill([1, 2, 3], p)\ny = loaddill(p)\np.rm(confirm_prompt=False)\nassert y == [1, 2, 3]\n\n[10/14/22 18:03:24] INFO     Dumped object of size ≈0 KB @ \"test.tmp\" in 6.44e-04     554288780.py:<cell line: 2>:2\n                             seconds"
  },
  {
    "objectID": "jupyter_notebook.html",
    "href": "jupyter_notebook.html",
    "title": "Jupyter Notebooks",
    "section": "",
    "text": "is_in_notebook\n\n is_in_notebook ()\n\n\n\n\nbackup_this_notebook\n\n backup_this_notebook (this_file_path, save_html_to=None,\n                       override_previous_backup=False, changelog=None,\n                       exclude_input=False)\n\n\n\n\nsave_notebook\n\n save_notebook (file_path)\n\n\nbackup_this_notebook(\"jupyter_notebook.ipynb\")\n\n\n\n\nshow_big_dataframe\n\n show_big_dataframe (df)\n\n\n\n\ndisplay_dfs_side_by_side\n\n display_dfs_side_by_side (*args, titles=<itertools.cycle object at\n                           0x7fafe7a319c0>, max_rows=50)\n\n\n\n\nh6\n\n h6 (text)\n\n\n\n\nh5\n\n h5 (text)\n\n\n\n\nh4\n\n h4 (text)\n\n\n\n\nh3\n\n h3 (text)\n\n\n\n\nh2\n\n h2 (text)\n\n\n\n\nh1\n\n h1 (text)\n\n\n\n\nshutdown_current_notebook\n\n shutdown_current_notebook ()"
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "torch_snippets",
    "section": "",
    "text": "DeepLearningConfig\n\n DeepLearningConfig ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nfrom torch_snippets.registry import parse_string\nfrom torch_snippets.torch_loader import *\nfrom torch_snippets import writelines\n\nMNIST(\n  (model): Sequential(\n    (0): Linear(in_features=768, out_features=256, bias=True)\n    (1): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n    )\n    (2): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n    )\n    (3): Linear(in_features=256, out_features=10, bias=True)\n  )\n)\n\n\n\nconfig_str = \"\"\"\n[META]\nexperiment = mnist.v1\ndescription = Training MLP with \n    mnist data on 10k images only\n    using huggingface trainer and \n    cosine annealing\n\n[ModelConfig]\nn_layers = 3\nn_hidden = 256\nn_classes = 10\n\n[DatasetConfig]\nroot = /home/datasets/mnist\ntrain = ${root}/train\nval = ${root}/val\ntrain_subset = 10000\nval_subest = ${train_subset}//10\n\n[TrainingConfig]\nmax_steps = ${DatasetConfig.train_subset} * 5\nlearning_rate = 3e-4\noutput_dir = ./results/${META.experiment}\nper_device_train_batch_size = 256\nper_device_eval_batch_size = ${per_device_train_batch_size}\nevaluation_strategy = \"steps\"\neval_steps = 500\nlogging_strategy = ${evaluation_strategy}\nlogging_steps = ${eval_steps}//100\nsave_strategy = ${evaluation_strategy}\nsave_steps = ${eval_steps}\nsave_total_limit = 1\nseed = 1234\nlabel_names = ['targets']\nlr_scheduler_type = cosine\n\"\"\".strip()\n\nconfig = parse_string(config_str)\n\n\nclass MNIST(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.model = nn.Sequential(\n            nn.Linear(768, config.n_hidden),\n            *[\n                nn.Sequential(nn.Linear(config.n_hidden, config.n_hidden), nn.ReLU())\n                for _ in range(config.n_layers - 1)\n            ],\n            nn.Linear(config.n_hidden, config.n_classes)\n        )\n\n    def forward(self, images):\n        ...\n\n\nmodel = MNIST(config.ModelConfig)\nprint(model)\n\nIf needed, configs can be unpacked like a dictionary too\n\nclass MNIST(nn.Module):\n    def __init__(self, *, n_hidden, n_classes, n_layers):\n        super().__init__()\n        self.model = nn.Sequential(\n            nn.Linear(768, n_hidden),\n            *[\n                nn.Sequential(nn.Linear(n_hidden, n_hidden), nn.ReLU())\n                for _ in range(n_layers - 1)\n            ],\n            nn.Linear(n_hidden, n_classes)\n        )\n\n    def forward(self, images):\n        ...\n\n\nmodel = MNIST(**config.ModelConfig)\nprint(model)\n\nMNIST(\n  (model): Sequential(\n    (0): Linear(in_features=768, out_features=256, bias=True)\n    (1): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n    )\n    (2): Sequential(\n      (0): Linear(in_features=256, out_features=256, bias=True)\n      (1): ReLU()\n    )\n    (3): Linear(in_features=256, out_features=10, bias=True)\n  )\n)\n\n\n\n\n\nGenericConfig\n\n GenericConfig (**kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\nGenericConfig is a special class that can have attributes solely based on the config file, i.e., when we are unsure what are the arguments in the config going to be\n\nwritelines(config_str.split(\"\\n\"), \"/tmp/tmp.ini\")\ntraining_config = GenericConfig.from_ini_file(\n    \"/tmp/tmp.ini\", config_root=\"TrainingConfig\"\n)\n\n\ndef train(**kwargs):\n    for k, v in kwargs.items():\n        print(k, v)\n\n\ntrain(**training_config)\n\nmax_steps 50000\nlearning_rate 0.00030000000000000003\noutput_dir ./results/mnist.v1\nper_device_train_batch_size 256\nper_device_eval_batch_size 256\nevaluation_strategy steps\neval_steps 500\nlogging_strategy steps\nlogging_steps 5\nsave_strategy steps\nsave_steps 500\nsave_total_limit 1\nseed 1234\nlabel_names ['targets']\nlr_scheduler_type cosine"
  },
  {
    "objectID": "misc.html",
    "href": "misc.html",
    "title": "Miscellaneous",
    "section": "",
    "text": "N = 100\nt = Timer(N)\nfor i in range(N):\n    time.sleep(0.01)\n    t()\n    if i == 50:\n        print()\n\n51/100 (0.58s - 0.57s remaining - 88.39 iters/s)          \n100/100 (1.14s - 0.01s remaining - 87.99 iters/s)          \n\n\n\n@io\n@timeit\ndef foo(a, b=None):\n    if b is None:\n        return a + 1\n    else:\n        time.sleep(2)\n        return a + b\n\n\nfoo(10)\nfoo(10, b=20)\n\n[03/20/23 18:59:31] INFO     0.00 seconds to execute `foo`                                    3733636588.py:inner:8\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\ntuple of 1 items\n\n\n\n        int: 10\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\ndict of 0 items\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\nint: 11\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n                    INFO     Args: None                                                      3733636588.py:inner:18\n                             KWargs: None                                                                          \n                             Output: None                                                                          \n\n\n\n[03/20/23 18:59:33] INFO     2.00 seconds to execute `foo`                                    3733636588.py:inner:8\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\ntuple of 1 items\n\n\n\n        int: 10\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\ndict of 1 items\n\n\n\n        B:\n        int: 20\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\nint: 30\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n[03/20/23 18:59:34] INFO     Args: None                                                      3733636588.py:inner:18\n                             KWargs: None                                                                          \n                             Output: None                                                                          \n\n\n\n30"
  },
  {
    "objectID": "registry.html",
    "href": "registry.html",
    "title": "Registry",
    "section": "",
    "text": "Suppose you have a file called config.ini like so…\n\n!cat /tmp/config.ini\n\n\n[META]\nversion = 0.0.1\nname = mnist\nroot = /home/me/projects/${META.name}\ndescription = This is a sample\n    config file with a multiline\n    description. These are useful for\n    project descriptions/changelog/devnotes etc...\n\n[Data]\nsource = https://files.fast.ai/data/examples/mnist_tiny.tgz\nroot = ${META.root}/data/\n\n[misc]\nx = 1\ny = 20\nz = float(${x}*${y}**2)\na = ['hello','hi','how','are','you', ${x}*${z}*${y}]\nb = {\"hi\": 1, \"hello\": 2}\n\n[load]\n    [load.test]\n    @load = print_root_location\n    root = ${Data.root}\n    \n    [load.csv]\n    @load = load_csv_function\n    root = ${Data.root}\n    \n    [load.json]\n    @load = load_json_class\n    root = ${Data.root}\n    \n    \n\n\n\nYou can load it up as an AttrDict\n\nconfig = parse(\"/tmp/config.ini\")\nassert config.META.version == \"0.0.1\"\nassert config.META.root == \"/home/me/projects/mnist\"\nassert isinstance(config.misc.b, AttrDict), type(config.project.data.b)\nassert isinstance(config.misc.a, L)\n\nNotice, how the ${} variables got resolved.\nNot just that, the varaible z got computed on the fly.\nNot just that, some of the variables like list and dict got resolved into their respective python data structures.\n\nconfig.pretty()\n\n{\n    \"Data\": {\n        \"root\": \"/home/me/projects/mnist/data/\",\n        \"source\": \"https://files.fast.ai/data/examples/mnist_tiny.tgz\"\n    },\n    \"META\": {\n        \"description\": \"This is a sample\\nconfig file with a multiline\\ndescription. These are useful for\\nproject \ndescriptions/changelog/devnotes etc...\",\n        \"name\": \"mnist\",\n        \"root\": \"/home/me/projects/mnist\",\n        \"version\": \"0.0.1\"\n    },\n    \"load\": {\n        \"csv\": {\n            \"@load\": null,\n            \"root\": \"/home/me/projects/mnist/data/\"\n        },\n        \"json\": {\n            \"@load\": \"load_json_class\",\n            \"root\": \"/home/me/projects/mnist/data/\"\n        },\n        \"test\": {\n            \"@load\": \"print_root_location\",\n            \"root\": \"/home/me/projects/mnist/data/\"\n        }\n    },\n    \"misc\": {\n        \"a\": [\n            \"hello\",\n            \"hi\",\n            \"how\",\n            \"are\",\n            \"you\",\n            8000.0\n        ],\n        \"b\": {\n            \"hello\": 2,\n            \"hi\": 1\n        },\n        \"x\": 1,\n        \"y\": 20,\n        \"z\": 400.0\n    }\n}\n\n\n\n\nprint(config.META.description)\n\nThis is a sample\nconfig file with a multiline\ndescription. These are useful for\nproject descriptions/changelog/devnotes etc...\n\n\nYou can also register/call python functions/callables/classes/objects to strings by running\n\nregistry.create(\"load\")\n\n\n@registry.load.register(\"print_root_location\")\ndef printer(root):\n    return root\n\n\n@registry.load.register(\"load_csv_function\")\ndef _load_csv_function(root):\n    def load_csv_function(file):\n        return f\"Loading file from {root}/{file}\"\n\n    return load_csv_function\n\n\n@registry.load.register(\"load_json_class\")\nclass JsonLoader:\n    def __init__(self, root):\n        self.root = root\n\n    def __call__(self, file):\n        assert file.endswith(\"json\")\n        return f\"Loading file from {self.root}/{file}\"\n\n… and resolve them on parse\n\nconfig = parse_and_resolve(\"/tmp/config.ini\")\n\n\nconfig.load.test\n\n'/home/me/projects/mnist/data/'\n\n\n\nconfig.load.csv(file=\"file.csv\")\n\n'Loading file from /home/me/projects/mnist/data//file.csv'\n\n\n\nconfig.load.json(file=\"file.json\")\n\n'Loading file from /home/me/projects/mnist/data//file.json'"
  },
  {
    "objectID": "adapters.html",
    "href": "adapters.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Adapters\nTo convert data from/to various formats\n\n\n\nfile_2_bytes\n\n file_2_bytes (fpath)\n\n\n\n\nbytes_2_file\n\n bytes_2_file (input:bytes, fpath:Union[str,pathlib.Path],\n               silent:bool=False)\n\nSave bytes input at given fpath\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput\nbytes\n\nbytes\n\n\nfpath\ntyping.Union[str, pathlib.Path]\n\nPlace where you want to save the file\n\n\nsilent\nbool\nFalse\n\n\n\nReturns\nNone\n\n\n\n\n\n\n\n\nb64_2_file\n\n b64_2_file (input:str, fpath:Union[str,pathlib.Path])\n\nSave a file encoded as a base64 input at given fpath\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ninput\nstr\nbase64 encoded string\n\n\nfpath\ntyping.Union[str, pathlib.Path]\nPlace where you want to save the file\n\n\nReturns\nNone\n\n\n\n\n\n\n\nb64_2_np\n\n b64_2_np (input:str)\n\n\n\n\nnp_2_b64\n\n np_2_b64 (image:numpy.ndarray)\n\nConvert a numpy image to base64 string\n\n\n\ncvat_2_csvs\n\n cvat_2_csvs (xmlfile, csvs_folder)\n\n\n\n\ncsvs_2_cvat\n\n csvs_2_cvat (images_folder, csvs_folder, xml_output_file, items=None,\n              parquet=False, relative_df=True, default_label='Background',\n              extension='jpg')"
  },
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Report\n\n\nfrom torch_snippets.torch_loader import Report\nimport numpy as np\nimport time\n\n\nn_epochs = 3\nreport = Report(n_epochs)\nrandom_walker1 = 0\nrandom_walker2 = 0\n\nfor epoch in range(n_epochs):\n    for ix in range(1000):\n        report.record(\n            pos=epoch + (ix + 1) / 1000,\n            loss=random_walker1,\n            val_loss=random_walker2,\n            end=\"\\r\",\n        )\n        random_walker1 += np.random.normal()\n        random_walker2 += np.random.normal()\n        time.sleep(0.001)\n    report.report_avgs(epoch + 1)\n\nreport.plot()\n\nEPOCH: 1.000    loss: -6.503    val_loss: -3.093    (1.19s - 2.38s remaining)))\nEPOCH: 2.000    loss: 48.754    val_loss: -6.265    (2.37s - 1.18s remaining))\nEPOCH: 3.000    loss: 38.115    val_loss: -29.732   (3.54s - 0.00s remaining)\n\n\n\n\n\n\nn_epochs = 5\nreport = Report(n_epochs, old_report=report)\n\nfor epoch in range(n_epochs):\n    for ix in range(1000):\n        report.record(\n            pos=epoch + (ix + 1) / 1000,\n            loss=random_walker1,\n            val_loss=random_walker2,\n            end=\"\\r\",\n        )\n        random_walker1 += np.random.normal()\n        random_walker2 += np.random.normal()\n        time.sleep(0.001)\n    report.report_avgs(epoch + 1)\n\nEPOCH: 1.000    loss: 29.338    val_loss: -74.955   (1.17s - 4.70s remaining))\nEPOCH: 2.000    loss: 0.340 val_loss: -110.763  (2.35s - 3.52s remaining)))\nEPOCH: 3.000    loss: 30.617    val_loss: -84.599   (3.51s - 2.34s remaining))\nEPOCH: 4.000    loss: 34.309    val_loss: -27.520   (4.68s - 1.17s remaining)\nEPOCH: 5.000    loss: 15.252    val_loss: -46.033   (5.85s - 0.00s remaining)\n\n\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.vlines(0, -100, 100, colors=[\"red\"])\nreport.plot(ax=ax)"
  },
  {
    "objectID": "capsule.html",
    "href": "capsule.html",
    "title": "torch_snippets",
    "section": "",
    "text": "Capsule (Tutorial)\nBuilt on top of nn.Module for faster prototyping\n\nLet’s load the iris dataset first\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\ndata = load_iris()\nX, y = data.data, data.target\nX_trn, X_val, y_trn, y_val = train_test_split(X, y, random_state=42)\n\n… and create the data loaders\n\nfrom torch_snippets.inspector import inspect\nfrom torch.utils.data import TensorDataset\n\ntrn_ds = TensorDataset(*[torch.Tensor(i) for i in [X_trn, y_trn]])\ntrn_dl = DataLoader(trn_ds, batch_size=32)\n\nval_ds = TensorDataset(*[torch.Tensor(i) for i in [X_val, y_val]])\nval_dl = DataLoader(val_ds, batch_size=32)\n\ninspect(next(iter(val_dl)))\n\n══════════════════════════════════════════════════════════════════\nlist of 2 items\ntensor[32, 4] n=128 x∈[0.100, 7.900] μ=3.487 σ=2.034\ntensor[32] x∈[0., 2.000] μ=0.969 σ=0.861\n══════════════════════════════════════════════════════════════════\n\n\nNext we’ll import Capsule and a few decorators that will tell the model to change it’s mode to train/test during the fit function\nfrom torch_snippets.trainer.capsule import Capsule, train, validate, predict\nCreate the neural network and define it’s forward function as usual pytorch business. Only difference now is that you’ll also add self.loss_fn and self.optimizer attributes in the init\nclass IrisModel(Capsule):\n    def __init__(self):\n        super().__init__()\n        self.model = nn.Sequential(\n            nn.BatchNorm1d(4),\n            nn.Linear(4, 16),\n            nn.Dropout(0.2),\n            nn.BatchNorm1d(16),\n            nn.ReLU(inplace=True),\n            nn.Linear(16, 8),\n            nn.Dropout(0.2),\n            nn.BatchNorm1d(8),\n            nn.ReLU(inplace=True),\n            nn.Linear(8, 3),\n        )\n        self.loss_fn = nn.CrossEntropyLoss()\n        self.optimizer = optim.Adam(self.parameters())\n\n    def forward(self, x):\n        return self.model(x)\nTo fully describe the model’s behaviour we still need to define three functions\n1. train_batch\n2. validate_batch and,\n3. predict which is optional\nlike so\n\n    @train\n    def train_batch(self, batch):\n        x, y = batch\n        _y = self.forward(x)\n        loss = self.loss_fn(_y, y.long())\n        return {\"loss\": loss}\n\n    @validate\n    def validate_batch(self, batch=None, dl=None):\n        if dl is not None:\n            output = []\n            for batch in dl:\n                output.extend(self.predict(batch=batch)[\"val_acc\"])\n            return np.mean(output)\n        x, y = batch\n        _y = self.forward(x)\n        loss = self.loss_fn(_y, y.long())\n        acc = (y == _y.max(-1)[1]).float().mean()\n        return {\"val_loss\": loss, \"val_acc\": acc}\n\n    @predict\n    def predict(self, batch=None, dl=None):\n        if dl is not None:\n            output = []\n            for batch in dl:\n                output.extend(self.predict(batch=batch))\n            return output\n        x, y = batch\n        _y = self.forward(x)\n        o = _y.max(-1)[1].cpu().detach().numpy().tolist()\n        return o\n\nEnsure you return dictionaries of losses, accuracy metrics in train_batch and validate_batch functions. You can return as many metrics during training and validation, they will be auto logged.\n\nAlso make sure at least one of the keys in train_batch is the key loss, as this is used to compute gradients.*\n\nWe could now create the model…\n\nmodel = IrisModel()\nmodel.device = \"cpu\"\n\n… and run model.fit with an optional number of logs to print to the console\n\nmodel.fit(trn_dl, val_dl, num_epochs=100, print_total=2, device=\"cpu\")\n\nEPOCH: 1.000    loss: 1.351 val_loss: 1.403 val_acc: 0.344  (0.69s - 67.83s remaining)\nEPOCH: 50.000   loss: 0.608 val_loss: 0.524 val_acc: 1.000  (2.86s - 2.86s remaining)\nEPOCH: 100.000  loss: 0.265 val_loss: 0.174 val_acc: 1.000  (3.28s - 0.00s remaining)\n\n\n\n\n\nmodel.evaluate accepts a validation data loader that will repeatedly call validate_batch and return aggregated metrics\n\nmodel.evaluate(val_dl, device=\"cpu\")\n\nEPOCH: 1.000    val_loss: 0.177 val_acc: 1.000  (0.01s - 0.00s remaining)\n\n\n{'val_loss': 0.1768618, 'val_acc': 1.0}"
  },
  {
    "objectID": "logging.html",
    "href": "logging.html",
    "title": "Rich Logging and printing",
    "section": "",
    "text": "print(\"The Number is 128\")\nprint(\n    {\n        \"a\": 1,\n        \"b\": [\n            {1, 2, 3},\n            \"lskjdf\",\n        ],\n        \"c\": 1,\n        \"d\": [\n            {1, 2, 3},\n            \"lskjdf\",\n        ],\n        \"ae\": 1,\n        \"bf\": [\n            {1, 2, 3},\n            \"lskjdf\",\n        ],\n        \"ag\": 1,\n        \"ba\": [\n            {1, 2, 3},\n            \"lskjdf\",\n        ],\n    }\n)\n\nThe Number is 128\n\n\n\n{\n    'a': 1,\n    'b': [{1, 2, 3}, 'lskjdf'],\n    'c': 1,\n    'd': [{1, 2, 3}, 'lskjdf'],\n    'ae': 1,\n    'bf': [{1, 2, 3}, 'lskjdf'],\n    'ag': 1,\n    'ba': [{1, 2, 3}, 'lskjdf']\n}\n\n\n\n\nprint(r\"\\x86\")\n\n\\x86\n\n\n\n\na = {1: 1221, 2: 2342}\ndel a[1]\na\n\n{2: 2342}\n\n\n\nDebug(\"TESTING {1,2,3}\")\nInfo(\"TESTING {1,2,3}\")\nWarn(\"TESTING {1,2,3}\")\nExcep(\"TESTING {1,2,3}\")\n\n[09/21/22 01:01:38] DEBUG    TESTING {1,2,3}                                               3592958886.py:<module>:1\n\n\n\n                    INFO     TESTING {1,2,3}                                               3592958886.py:<module>:2\n\n\n\n                    WARNING  TESTING {1,2,3}                                               3592958886.py:<module>:3\n\n\n\n                    ERROR    TESTING {1,2,3}                                               3592958886.py:<module>:4\n\n\n\n\n\nenter_exit\n\n enter_exit (func)\n\nLogs the time taken to execute a function along with entry & exit time stamps\n\n@enter_exit\ndef add(x, y):\n    print(\"sleeping...\")\n    time.sleep(2)\n    return x + y\n\n\nadd(1, 23)\n\n[09/21/22 01:01:41] DEBUG    Entered function `add`                                        4246827219.py:<module>:8\n\n\n\nsleeping...\n\n\n\n[09/21/22 01:01:43] DEBUG    Exiting function `add` after 2.010 seconds                    4246827219.py:<module>:8\n\n\n\n24\n\n\n\ndef do():\n    try:\n        1 / 0\n    except Exception as e:\n        # console.print_exception(max_frames=20)\n        logger.exception(e)\n\n\ndef do2():\n    do()\n\n\ndo2()\n\n                    ERROR    division by zero                                                    3806461673.py:do:6\n                             Traceback (most recent call last):                                                    \n                                                                                                                   \n                               File \"/Users/yeshwanth.y/miniconda3/lib/python3.9/runpy.py\", line                   \n                             197, in _run_module_as_main                                                           \n                                 return _run_code(code, main_globals, None,                                        \n                                        |         |     -> {'__name__': '__main__', '__doc__':                     \n                             'Entry point for launching an IPython kernel.\\n\\nThis is separate                     \n                             from the ipykernel pack...                                                            \n                                        |         -> <code object <module> at 0x10fc10df0, file                    \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l_launcher.py\",...                                                                    \n                                        -> <function _run_code at 0x10fc14310>                                     \n                               File \"/Users/yeshwanth.y/miniconda3/lib/python3.9/runpy.py\", line                   \n                             87, in _run_code                                                                      \n                                 exec(code, run_globals)                                                           \n                                      |     -> {'__name__': '__main__', '__doc__': 'Entry point                    \n                             for launching an IPython kernel.\\n\\nThis is separate from the                         \n                             ipykernel pack...                                                                     \n                                      -> <code object <module> at 0x10fc10df0, file                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l_launcher.py\",...                                                                    \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l_launcher.py\", line 16, in <module>                                                  \n                                 app.launch_new_instance()                                                         \n                                 |   -> <bound method Application.launch_instance of <class                        \n                             'ipykernel.kernelapp.IPKernelApp'>>                                                   \n                                 -> <module 'ipykernel.kernelapp' from                                             \n                             '/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/kernelapp.py'>                                                                      \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/traitlet                   \n                             s/config/application.py\", line 846, in launch_instance                                \n                                 app.start()                                                                       \n                                 |   -> <function IPKernelApp.start at 0x112680e50>                                \n                                 -> <ipykernel.kernelapp.IPKernelApp object at 0x10fa816a0>                        \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/kernelapp.py\", line 677, in start                                                   \n                                 self.io_loop.start()                                                              \n                                 |    |       -> <function BaseAsyncIOLoop.start at 0x110a413a0>                   \n                                 |    -> <tornado.platform.asyncio.AsyncIOMainLoop object at                       \n                             0x112689a30>                                                                          \n                                 -> <ipykernel.kernelapp.IPKernelApp object at 0x10fa816a0>                        \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/tornado/                   \n                             platform/asyncio.py\", line 199, in start                                              \n                                 self.asyncio_loop.run_forever()                                                   \n                                 |    |            -> <function BaseEventLoop.run_forever at                       \n                             0x110722ee0>                                                                          \n                                 |    -> <_UnixSelectorEventLoop running=True closed=False                         \n                             debug=False>                                                                          \n                                 -> <tornado.platform.asyncio.AsyncIOMainLoop object at                            \n                             0x112689a30>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/asyncio/base_events.py                   \n                             \", line 596, in run_forever                                                           \n                                 self._run_once()                                                                  \n                                 |    -> <function BaseEventLoop._run_once at 0x110726a60>                         \n                                 -> <_UnixSelectorEventLoop running=True closed=False                              \n                             debug=False>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/asyncio/base_events.py                   \n                             \", line 1890, in _run_once                                                            \n                                 handle._run()                                                                     \n                                 |      -> <function Handle._run at 0x1106245e0>                                   \n                                 -> <Handle <TaskWakeupMethWrapper object at                                       \n                             0x119dac820>(<Future finis...040>, ...],))>)>                                         \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/asyncio/events.py\",                      \n                             line 80, in _run                                                                      \n                                 self._context.run(self._callback, *self._args)                                    \n                                 |    |            |    |           |    -> <member '_args' of                     \n                             'Handle' objects>                                                                     \n                                 |    |            |    |           -> <Handle                                     \n                             <TaskWakeupMethWrapper object at 0x119dac820>(<Future finis...040>,                   \n                             ...],))>)>                                                                            \n                                 |    |            |    -> <member '_callback' of 'Handle'                         \n                             objects>                                                                              \n                                 |    |            -> <Handle <TaskWakeupMethWrapper object at                     \n                             0x119dac820>(<Future finis...040>, ...],))>)>                                         \n                                 |    -> <member '_context' of 'Handle' objects>                                   \n                                 -> <Handle <TaskWakeupMethWrapper object at                                       \n                             0x119dac820>(<Future finis...040>, ...],))>)>                                         \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/kernelbase.py\", line 457, in dispatch_queue                                         \n                                 await self.process_one()                                                          \n                                       |    -> <function Kernel.process_one at 0x111eb4040>                        \n                                       -> <ipykernel.ipkernel.IPythonKernel object at                              \n                             0x1126a7b80>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/kernelbase.py\", line 446, in process_one                                            \n                                 await dispatch(*args)                                                             \n                                       |         -> ([<zmq.sugar.frame.Frame object at                             \n                             0x112735ca0>, <zmq.sugar.frame.Frame object at 0x112735bf0>,                          \n                             <zmq.sugar.frame.Frame object...                                                      \n                                       -> <bound method Kernel.dispatch_shell of                                   \n                             <ipykernel.ipkernel.IPythonKernel object at 0x1126a7b80>>                             \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/kernelbase.py\", line 353, in dispatch_shell                                         \n                                 await result                                                                      \n                                       -> <coroutine object Kernel.execute_request at                              \n                             0x1127457c0>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/kernelbase.py\", line 648, in execute_request                                        \n                                 reply_content = await reply_content                                               \n                                                       -> <coroutine object                                        \n                             IPythonKernel.do_execute at 0x1127451c0>                                              \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/ipkernel.py\", line 353, in do_execute                                               \n                                 res = shell.run_cell(code, store_history=store_history,                           \n                             silent=silent)                                                                        \n                                       |     |        |                   |                                        \n                             -> False                                                                              \n                                       |     |        |                   -> True                                  \n                                       |     |        -> 'def do():\\n    try:\\n        1 / 0\\n                     \n                             except Exception as e:\\n        #                                                     \n                             console.print_exception(max_frames=20)\\n        lo...                                 \n                                       |     -> <function ZMQInteractiveShell.run_cell at                          \n                             0x111eca4c0>                                                                          \n                                       -> <ipykernel.zmqshell.ZMQInteractiveShell object at                        \n                             0x1126f94c0>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/ipykerne                   \n                             l/zmqshell.py\", line 533, in run_cell                                                 \n                                 return super(ZMQInteractiveShell, self).run_cell(*args,                           \n                             **kwargs)                                                                             \n                                              |                    |               |       ->                      \n                             {'store_history': True, 'silent': False}                                              \n                                              |                    |               -> ('def                        \n                             do():\\n    try:\\n        1 / 0\\n    except Exception as e:\\n                          \n                             # console.print_exception(max_frames=20)\\n        l...                                \n                                              |                    ->                                              \n                             <ipykernel.zmqshell.ZMQInteractiveShell object at 0x1126f94c0>                        \n                                              -> <class                                                            \n                             'ipykernel.zmqshell.ZMQInteractiveShell'>                                             \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/IPython/                   \n                             core/interactiveshell.py\", line 2914, in run_cell                                     \n                                 result = self._run_cell(                                                          \n                                          |    -> <function InteractiveShell._run_cell at                          \n                             0x1111bbca0>                                                                          \n                                          -> <ipykernel.zmqshell.ZMQInteractiveShell object at                     \n                             0x1126f94c0>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/IPython/                   \n                             core/interactiveshell.py\", line 2960, in _run_cell                                    \n                                 return runner(coro)                                                               \n                                        |      -> <coroutine object                                                \n                             InteractiveShell.run_cell_async at 0x16b48be40>                                       \n                                        -> <function _pseudo_sync_runner at 0x1111ab310>                           \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/IPython/                   \n                             core/async_helpers.py\", line 78, in _pseudo_sync_runner                               \n                                 coro.send(None)                                                                   \n                                 |    -> <method 'send' of 'coroutine' objects>                                    \n                                 -> <coroutine object InteractiveShell.run_cell_async at                           \n                             0x16b48be40>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/IPython/                   \n                             core/interactiveshell.py\", line 3185, in run_cell_async                               \n                                 has_raised = await self.run_ast_nodes(code_ast.body, cell_name,                   \n                                                    |    |             |        |     ->                           \n                             '/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_65923/3                   \n                             806461673.py'                                                                         \n                                                    |    |             |        ->                                 \n                             [<ast.FunctionDef object at 0x1134122b0>, <ast.FunctionDef object                     \n                             at 0x14c4fda00>, <ast.Expr object at 0x11341e9d0>]                                    \n                                                    |    |             -> <ast.Module object at                    \n                             0x113412a30>                                                                          \n                                                    |    -> <function                                              \n                             InteractiveShell.run_ast_nodes at 0x1111bbf70>                                        \n                                                    -> <ipykernel.zmqshell.ZMQInteractiveShell                     \n                             object at 0x1126f94c0>                                                                \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/IPython/                   \n                             core/interactiveshell.py\", line 3377, in run_ast_nodes                                \n                                 if (await self.run_code(code, result,  async_=asy)):                              \n                                           |    |        |     |               -> False                            \n                                           |    |        |     -> <ExecutionResult object at                       \n                             16b2e5370, execution_count=12 error_before_exec=None                                  \n                             error_in_exec=None info=<ExecutionInfo object...                                      \n                                           |    |        -> <code object <module> at                               \n                             0x111164240, file                                                                     \n                             \"/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_65923/3                   \n                             806461673.py\", ...                                                                    \n                                           |    -> <function InteractiveShell.run_code at                          \n                             0x1111bc0d0>                                                                          \n                                           -> <ipykernel.zmqshell.ZMQInteractiveShell object at                    \n                             0x1126f94c0>                                                                          \n                               File                                                                                \n                             \"/Users/yeshwanth.y/miniconda3/lib/python3.9/site-packages/IPython/                   \n                             core/interactiveshell.py\", line 3457, in run_code                                     \n                                 exec(code_obj, self.user_global_ns, self.user_ns)                                 \n                                      |         |    |               |    -> {'__name__':                          \n                             '__main__', '__doc__': 'Automatically created module for IPython                      \n                             interactive environment', '__package__': None, ...                                    \n                                      |         |    |               ->                                            \n                             <ipykernel.zmqshell.ZMQInteractiveShell object at 0x1126f94c0>                        \n                                      |         |    -> <property object at 0x1111b3360>                           \n                                      |         -> <ipykernel.zmqshell.ZMQInteractiveShell                         \n                             object at 0x1126f94c0>                                                                \n                                      -> <code object <module> at 0x111164240, file                                \n                             \"/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_65923/3                   \n                             806461673.py\", ...                                                                    \n                                                                                                                   \n                               File                                                                                \n                             \"/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_65923/3                   \n                             806461673.py\", line 11, in <module>                                                   \n                                 do2()                                                                             \n                                 -> <function do2 at 0x16b2dfc10>                                                  \n                                                                                                                   \n                               File                                                                                \n                             \"/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_65923/3                   \n                             806461673.py\", line 9, in do2                                                         \n                                 do()                                                                              \n                                 -> <function do at 0x16b2dfb80>                                                   \n                                                                                                                   \n                             > File                                                                                \n                             \"/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_65923/3                   \n                             806461673.py\", line 3, in do                                                          \n                                 1 / 0                                                                             \n                                                                                                                   \n                             ZeroDivisionError: division by zero                                                   \n                                                                                                                   \n                             ╭─────────────── Traceback (most recent call last) ───────────────╮                   \n                             │ /var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_6592 │                   \n                             │ 3/3806461673.py:3 in do                                         │                   \n                             │                                                                 │                   \n                             │ [Errno 2] No such file or directory:                            │                   \n                             │ '/var/folders/cp/1fbgq2n922j8ztdsq6551vldkr5sdy/T/ipykernel_659 │                   \n                             │ 23/3806461673.py'                                               │                   \n                             ╰─────────────────────────────────────────────────────────────────╯                   \n                             ZeroDivisionError: division by zero"
  },
  {
    "objectID": "inspector.html",
    "href": "inspector.html",
    "title": "Inspect",
    "section": "",
    "text": "import torch, numpy as np\nfrom torch_snippets import inspect\n\ninspect(torch.randint(0, 100, size=(4, 3, 5)), np.random.randint(-10, 10, (9, 19, 1)))\n\n══════════════════════════════════════════════════════════════════\n\n\n\nTensor  Shape: torch.Size([4, 3, 5])    Min: 2.000      Max: 97.000     Mean: 46.317    dtype: torch.int64 @ cpu\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\nndarray Shape: (9, 19, 1)       Min: -10.000    Max: 9.000      Mean: -0.345    dtype: int64\n\n\n\n══════════════════════════════════════════════════════════════════\n\n\n\n\nx = {\n    \"a\": [0, 1, 2, 3],\n    \"b\": torch.rand(10, 10),\n    \"c\": {\n        \"d\": np.arange(10),\n        \"e\": [\n            \"np.arange\",\n            {},\n            tuple(\n                [\n                    1,\n                    2,\n                ]\n            ),\n            set([1, 2, 3]),\n            [],\n            [11, 10],\n        ],\n    },\n}\ninspect(x)\n\n══════════════════════════════════════════════════════════════════\n\n\n\ndict of 3 items\n\n\n\n        A:\n        list of 4 items\n\n\n\n                int: 0\n\n\n\n                int: 1\n\n\n\n                int: 2\n\n\n\n                int: 3\n\n\n\n        B:\n        Tensor  Shape: torch.Size([10, 10])     Min: 0.000      Max: 0.989      Mean: 0.463     dtype: \ntorch.float32 @ cpu\n\n\n\n        C:\n        dict of 2 items\n\n\n\n                D:\n                ndarray Shape: (10,)    Min: 0.000      Max: 9.000      Mean: 4.500     dtype: int64\n\n\n\n                E:\n                list of 6 items\n\n\n\n                        str `np.arange`\n\n\n\n                        dict of 0 items\n\n\n\n                        tuple of 2 items\n\n\n\n                                int: 1\n\n\n\n                                int: 2\n\n\n\n                        set Length: 3\n\n\n\n                        list of 0 items\n\n\n\n                        and ... ... 1 more item(s)\n\n\n\n══════════════════════════════════════════════════════════════════"
  },
  {
    "objectID": "bokeh_plotting.html",
    "href": "bokeh_plotting.html",
    "title": "Bokeh Plots",
    "section": "",
    "text": "bplot = get_bplot()\nbplot.line(np.arange(100), np.cumsum(np.random.uniform(size=100)))\nbshow(bplot)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Utilities for simple needs",
    "section": "",
    "text": "Whether it is numpy, pandas, matplotlib or the useful functions that are mentioned below Simply call\nfrom torch_snippets import *\nAll the imports are lightweight and thus should not take more than a couple of seconds"
  },
  {
    "objectID": "index.html#auxiliary-functions",
    "href": "index.html#auxiliary-functions",
    "title": "Utilities for simple needs",
    "section": "Auxiliary Functions",
    "text": "Auxiliary Functions\nThere are simple functions that are overloaded to take inputs and perform repetitive tasks that usually take a few lines to write\n\nImages\nshow, inspect, Glob, read, resize, rotate\n\n\nFiles and Paths\nstem, Glob, parent, name, fname,\nmakedir, zip_files, unzip_file,\nfind, extn,\nreadlines, writelines\n\n\nLists\nL, flatten\n\n\nDump and load python objects\nloaddill,dumpdill\n\n\nMisc\nTqdm, Timer, randint, Logger\n\n\nSets\nunique, diff, choose, common\n\n\nPytorch Modules\nReshape and Permute (nn.Modules)\n\n\nReport as Pytorch Lightning Callback\nLightningReport\n\n\nCharts\nChart from altair\nand many more to come…"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Utilities for simple needs",
    "section": "Install",
    "text": "Install\npip install torch_snippets"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Utilities for simple needs",
    "section": "Usage",
    "text": "Usage\n\n\n\nCPU times: user 1.79 s, sys: 672 ms, total: 2.46 s\nWall time: 2.62 s\n\n\n\ndir()\n\n['AttrDict',\n 'B',\n 'BB',\n 'Blank',\n 'C',\n 'Chart',\n 'DataLoader',\n 'Dataset',\n 'Debug',\n 'E',\n 'Excep',\n 'F',\n 'Float',\n 'Glob',\n 'Image',\n 'ImportEnum',\n 'In',\n 'Inf',\n 'Info',\n 'Int',\n 'L',\n 'LightningReport',\n 'NullType',\n 'Out',\n 'P',\n 'PIL',\n 'Path',\n 'Permute',\n 'PrettyString',\n 'Report',\n 'Reshape',\n 'Self',\n 'ShowPrint',\n 'Stateful',\n 'Str',\n 'StrEnum',\n 'T',\n 'Timer',\n 'Tqdm',\n 'Warn',\n '_',\n '__',\n '___',\n '__builtin__',\n '__builtins__',\n '__doc__',\n '__loader__',\n '__name__',\n '__package__',\n '__spec__',\n '_dh',\n '_i',\n '_i1',\n '_i2',\n '_ih',\n '_ii',\n '_iii',\n '_oh',\n 'add',\n 'add_props',\n 'alt',\n 'anno_ret',\n 'annotations',\n 'arg0',\n 'arg1',\n 'arg2',\n 'arg3',\n 'arg4',\n 'argnames',\n 'argwhere',\n 'attrdict',\n 'basic_repr',\n 'bbfy',\n 'bind',\n 'camel2snake',\n 'charts',\n 'choose',\n 'chunked',\n 'class2attr',\n 'common',\n 'compose',\n 'copy_func',\n 'crop_from_bb',\n 'custom_dir',\n 'cv2',\n 'cycle',\n 'defaults',\n 'detuplify',\n 'device',\n 'df2bbs',\n 'diff',\n 'display',\n 'dumpdill',\n 'enlarge_bbs',\n 'eq',\n 'even_mults',\n 'exec_local',\n 'exit',\n 'extn',\n 'fastcores',\n 'fastuple',\n 'filter_dict',\n 'filter_ex',\n 'filter_keys',\n 'filter_values',\n 'find',\n 'first',\n 'flatten',\n 'fname',\n 'fname2',\n 'ge',\n 'gen',\n 'get_class',\n 'get_ipython',\n 'getattrs',\n 'glob',\n 'groupby',\n 'gt',\n 'hasattrs',\n 'ifnone',\n 'ignore_exceptions',\n 'in_',\n 'inspect',\n 'instantiate',\n 'inum_methods',\n 'is_',\n 'is_array',\n 'is_not',\n 'isdir',\n 'jitter',\n 'last_index',\n 'le',\n 'line',\n 'lines',\n 'listify',\n 'load_torch_model_weights_to',\n 'loaddill',\n 'loader',\n 'logger',\n 'lt',\n 'lzip',\n 'makedir',\n 'map_ex',\n 'maps',\n 'maybe_attr',\n 'md5',\n 'merge',\n 'mk_class',\n 'mul',\n 'ne',\n 'nested_attr',\n 'nested_idx',\n 'nn',\n 'not_',\n 'now',\n 'np',\n 'null',\n 'num_cpus',\n 'num_methods',\n 'nunique',\n 'optim',\n 'os',\n 'otherwise',\n 'pad',\n 'parent',\n 'partialler',\n 'patch',\n 'patch_property',\n 'patch_to',\n 'pd',\n 'pdb',\n 'pdfilter',\n 'pl',\n 'plt',\n 'properties',\n 'puttext',\n 'quit',\n 'rand',\n 'randint',\n 'range_of',\n 're',\n 'read',\n 'readPIL',\n 'readlines',\n 'rect',\n 'remove_duplicates',\n 'rename_batch',\n 'renumerate',\n 'replicate',\n 'resize',\n 'risinstance',\n 'rnum_methods',\n 'rotate',\n 'save_torch_model_weights_from',\n 'see',\n 'set_logging_level',\n 'setattrs',\n 'setify',\n 'show',\n 'shrink_bbs',\n 'snake2camel',\n 'sorted_ex',\n 'stem',\n 'stems',\n 'stop',\n 'store_attr',\n 'str_enum',\n 'sub',\n 'subplots',\n 'sys',\n 'th',\n 'to_absolute',\n 'to_relative',\n 'tonull',\n 'torch',\n 'torch_loader',\n 'torchvision',\n 'tqdm',\n 'trange',\n 'transforms',\n 'true',\n 'truediv',\n 'try_attrs',\n 'tuplify',\n 'type_hints',\n 'typed',\n 'uint',\n 'unique',\n 'uniqueify',\n 'unzip_file',\n 'using_attr',\n 'val2idx',\n 'with_cast',\n 'wrap_class',\n 'write',\n 'writelines',\n 'xywh2xyXY',\n 'zip_cycle',\n 'zip_files']"
  },
  {
    "objectID": "imgaug_loader.html",
    "href": "imgaug_loader.html",
    "title": "torch_snippets",
    "section": "",
    "text": "wrappers for common imgaug functions, that accept image and ocr data frame of bounding boxes\n\n\nfrom torch_snippets.loader import read, pd, show\n\nIM = read(\"/Users/yeshwanth.y/code/torch_snippets/assets/Preamble.png\")\nDF = pd.read_csv(\"/Users/yeshwanth.y/code/torch_snippets/assets/Preamble.csv\")\nDF = to_relative(DF, *IM.shape[:2])\nDF.head()\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      X\n      Y\n      text\n      block_id\n    \n  \n  \n    \n      0\n      0.249538\n      0.253501\n      0.569316\n      0.305322\n      ConstITUtIO\n      0\n    \n    \n      1\n      0.288355\n      0.369748\n      0.401109\n      0.397759\n      NLTHE\n      1\n    \n    \n      2\n      0.402957\n      0.369748\n      0.510166\n      0.397759\n      PEOPLE\n      1\n    \n    \n      3\n      0.493530\n      0.371148\n      0.545287\n      0.394958\n      OF\n      1\n    \n    \n      4\n      0.548983\n      0.369748\n      0.630314\n      0.397759\n      INDIA,\n      1\n    \n  \n\n\n\n\n\n\n\nim = IM.copy()\nim = rescale(im, sz=(400, 600))\nshow(im, sz=5)\n\n\n\n\n\ndf = DF.copy()\nim = IM.copy()\nim, df = rescale(im, df, (400, 600))\nshow(im, df=df, sz=5)\ndf.head()\n\nValueError: Unable to coerce to Series, length must be 6: given 0\n\n\n\n\n\n\nfor i in range(11):\n    angle = (i - 5) * 5\n    print(angle)\n    im = rotate(IM, angle=angle)\n    show(im, sz=1)\n\n-25\n\n\n\n\n\n-20\n\n\n\n\n\n-15\n\n\n\n\n\n-10\n\n\n\n\n\n-5\n\n\n\n\n\n0\n\n\n\n\n\n5\n\n\n\n\n\n10\n\n\n\n\n\n15\n\n\n\n\n\n20\n\n\n\n\n\n25\n\n\n\n\n\n\ndf = DF.copy()\nim = IM.copy()\nim, df = rotate(im, df, 90)\nshow(im, df=df, sz=20)\nprint(type(im))\ndf.head()\n\n\n\n\n<class 'numpy.ndarray'>\n\n\n\n\n\n\n  \n    \n      \n      text\n      block_id\n      x\n      y\n      X\n      Y\n    \n  \n  \n    \n      0\n      ConstITUtIO\n      0\n      0.693277\n      0.249538\n      0.745098\n      0.569316\n    \n    \n      1\n      NLTHE\n      1\n      0.600840\n      0.288355\n      0.628852\n      0.401109\n    \n    \n      2\n      PEOPLE\n      1\n      0.600840\n      0.402957\n      0.628852\n      0.510166\n    \n    \n      3\n      OF\n      1\n      0.603641\n      0.493530\n      0.627451\n      0.545287\n    \n    \n      4\n      INDIA,\n      1\n      0.600840\n      0.548983\n      0.628852\n      0.630314\n    \n  \n\n\n\n\n\n\n\n\ndf = DF.copy()\nim = IM.copy()\nim, df = pad(im, df, deltas=(90, 90), cval=0)\nshow(im, df=df, sz=20)\nprint(type(im))\ndf.head()\n\n\n\n\n<class 'numpy.ndarray'>\n\n\n\n\n\n\n  \n    \n      \n      text\n      block_id\n      x\n      y\n      X\n      Y\n    \n  \n  \n    \n      0\n      ConstITUtIO\n      0\n      0.310536\n      0.302521\n      0.550832\n      0.343137\n    \n    \n      1\n      NLTHE\n      1\n      0.340111\n      0.394958\n      0.425139\n      0.417367\n    \n    \n      2\n      PEOPLE\n      1\n      0.426987\n      0.394958\n      0.506470\n      0.417367\n    \n    \n      3\n      OF\n      1\n      0.493530\n      0.396359\n      0.532348\n      0.415966\n    \n    \n      4\n      INDIA,\n      1\n      0.536044\n      0.394958\n      0.597043\n      0.417367\n    \n  \n\n\n\n\n\n\n\nAll functions will work with data frames that contain either of absolute/relative coordinates, and will preserve the image type (np.ndarray or PIL.Image.Image) too\n\ndf = DF.copy()\nim = IM.copy()\nheight, width = im.shape\nshow(df.head())\nim = PIL.Image.fromarray(im)\nim, df = rotate(im, df, 45, cval=127)\nim, df = pad(im, df, deltas=(200, 200), cval=0)\nim, df = rescale(im, df, sz=(300, 300))\nshow(im, df=df, sz=20)\nprint(type(im))\ndf.head()\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      X\n      Y\n      text\n      block_id\n    \n  \n  \n    \n      0\n      0.249538\n      0.253501\n      0.569316\n      0.305322\n      ConstITUtIO\n      0\n    \n    \n      1\n      0.288355\n      0.369748\n      0.401109\n      0.397759\n      NLTHE\n      1\n    \n    \n      2\n      0.402957\n      0.369748\n      0.510166\n      0.397759\n      PEOPLE\n      1\n    \n    \n      3\n      0.493530\n      0.371148\n      0.545287\n      0.394958\n      OF\n      1\n    \n    \n      4\n      0.548983\n      0.369748\n      0.630314\n      0.397759\n      INDIA,\n      1\n    \n  \n\n\n\n\n\n\n\n<class 'PIL.Image.Image'>\n\n\n\n\n\n\n  \n    \n      \n      text\n      block_id\n      x\n      y\n      X\n      Y\n    \n  \n  \n    \n      0\n      ConstITUtIO\n      0\n      0.500000\n      0.326667\n      0.613333\n      0.440000\n    \n    \n      1\n      NLTHE\n      1\n      0.473333\n      0.383333\n      0.516667\n      0.426667\n    \n    \n      2\n      PEOPLE\n      1\n      0.506667\n      0.416667\n      0.550000\n      0.460000\n    \n    \n      3\n      OF\n      1\n      0.536667\n      0.446667\n      0.560000\n      0.470000\n    \n    \n      4\n      INDIA,\n      1\n      0.550000\n      0.460000\n      0.586667\n      0.493333"
  }
]
